version: 2
before:
  hooks:
    - go mod tidy
    - go mod download
builds:
  - id: controller
    main: ./cmd/kgateway
    binary: kgateway-linux-{{ .Arch }}
    gcflags: "{{ .Env.GCFLAGS }}"
    ldflags: "{{ .Env.LDFLAGS }}"
    env:
    - CGO_ENABLED=0
    - GO111MODULE=on
    - GOARCH={{ .Arch }}
    - GOOS={{ .Os }}
    mod_timestamp: "{{ .CommitTimestamp }}"
    goos:
      - linux
    goarch:
      - amd64
      - arm64
  - id: sds
    main: ./cmd/sds
    binary: sds-linux-{{ .Arch }}
    gcflags: "{{ .Env.GCFLAGS }}"
    ldflags: "{{ .Env.LDFLAGS }}"
    env:
    - CGO_ENABLED=0
    - GO111MODULE=on
    - GOARCH={{ .Arch }}
    - GOOS={{ .Os }}
    goos:
      - linux
    goarch:
      - amd64
      - arm64
  - id: envoyinit
    main: ./internal/envoyinit/cmd
    binary: envoyinit-linux-{{ .Arch }}
    gcflags: "{{ .Env.GCFLAGS }}"
    ldflags: "{{ .Env.LDFLAGS }}"
    env:
    - CGO_ENABLED=0
    - GO111MODULE=on
    - GOARCH={{ .Arch }}
    - GOOS={{ .Os }}
    goos:
      - linux
    goarch:
      - amd64
      - arm64
dockers:
  - image_templates:
      - &controller_arm_image "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.CONTROLLER_IMAGE_REPO }}:{{ .Env.VERSION }}-arm64"
    use: buildx
    dockerfile: &controller_dockerfile cmd/kgateway/Dockerfile
    goos: linux
    goarch: arm64
    build_flag_templates:
      - "--pull"
      - "--platform=linux/arm64"
      - "--build-arg=GOARCH=arm64"
      - "--build-arg=ENVOY_IMAGE={{ .Env.ENVOY_IMAGE }}"
  - image_templates:
      - &controller_amd_image "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.CONTROLLER_IMAGE_REPO }}:{{ .Env.VERSION }}-amd64"
    use: buildx
    dockerfile: *controller_dockerfile
    goos: linux
    goarch: amd64
    build_flag_templates:
      - "--pull"
      - "--platform=linux/amd64"
      - "--build-arg=GOARCH=amd64"
      - "--build-arg=ENVOY_IMAGE={{ .Env.ENVOY_IMAGE }}"
  - image_templates:
      - &sds_arm_image "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.SDS_IMAGE_REPO }}:{{ .Env.VERSION }}-arm64"
    use: buildx
    dockerfile: &sds_dockerfile cmd/sds/Dockerfile
    goos: linux
    goarch: arm64
    build_flag_templates:
      - "--pull"
      - "--platform=linux/arm64"
      - "--build-arg=GOARCH=arm64"
      - "--build-arg=BASE_IMAGE={{ .Env.ALPINE_BASE_IMAGE }}"
  - image_templates:
      - &sds_amd_image "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.SDS_IMAGE_REPO }}:{{ .Env.VERSION }}-amd64"
    use: buildx
    dockerfile: *sds_dockerfile
    goos: linux
    goarch: amd64
    build_flag_templates:
      - "--pull"
      - "--platform=linux/amd64"
      - "--build-arg=GOARCH=amd64"
      - "--build-arg=BASE_IMAGE={{ .Env.ALPINE_BASE_IMAGE }}"
  - image_templates:
      - &envoyinit_arm_image "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.ENVOYINIT_IMAGE_REPO }}:{{ .Env.VERSION }}-arm64"
    use: buildx
    dockerfile: &envoyinit_dockerfile internal/envoyinit/Dockerfile.envoyinit
    goos: linux
    goarch: arm64
    build_flag_templates:
      - "--pull"
      - "--platform=linux/arm64"
      - "--build-arg=GOARCH=arm64"
      - "--build-arg=ENTRYPOINT_SCRIPT=/internal/envoyinit/cmd/docker-entrypoint.sh"
      - "--build-arg=ENVOY_IMAGE={{ .Env.ENVOY_IMAGE }}"
      - "--build-arg=RUSTFORMATIONS_DIR=/internal/envoyinit/rustformations"
    extra_files:
      - internal/envoyinit/cmd/docker-entrypoint.sh
      - internal/envoyinit/rustformations
  - image_templates:
      - &envoyinit_amd_image "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.ENVOYINIT_IMAGE_REPO }}:{{ .Env.VERSION }}-amd64"
    use: buildx
    dockerfile: *envoyinit_dockerfile
    goos: linux
    goarch: amd64
    build_flag_templates:
      - "--pull"
      - "--platform=linux/amd64"
      - "--build-arg=GOARCH=amd64"
      - "--build-arg=ENTRYPOINT_SCRIPT=/internal/envoyinit/cmd/docker-entrypoint.sh"
      - "--build-arg=ENVOY_IMAGE={{ .Env.ENVOY_IMAGE }}"
      - "--build-arg=RUSTFORMATIONS_DIR=/internal/envoyinit/rustformations"
    extra_files:
      - internal/envoyinit/cmd/docker-entrypoint.sh
      - internal/envoyinit/rustformations
  - image_templates:
      - &ai_extensions_arm_image "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.AI_EXTENSION_IMAGE_REPO }}:{{ .Env.VERSION }}-arm64"
    use: buildx
    dockerfile: python/Dockerfile
    goos: linux
    goarch: arm64
    build_flag_templates:
      - "--pull"
      - "--platform=linux/arm64"
      - "--build-arg=PYTHON_DIR=/python"
    extra_files:
      - python/requirements.txt
      - python/ai_extension
  - image_templates:
      - &ai_extensions_amd_image "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.AI_EXTENSION_IMAGE_REPO }}:{{ .Env.VERSION }}-amd64"
    use: buildx
    dockerfile: python/Dockerfile
    goos: linux
    goarch: amd64
    build_flag_templates:
      - "--pull"
      - "--platform=linux/amd64"
      - "--build-arg=PYTHON_DIR=/python"
    extra_files:
      - python/requirements.txt
      - python/ai_extension
docker_manifests:
  - name_template: "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.CONTROLLER_IMAGE_REPO }}:{{ .Env.VERSION }}"
    image_templates:
      - *controller_arm_image
      - *controller_amd_image
  - name_template: "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.SDS_IMAGE_REPO }}:{{ .Env.VERSION }}"
    image_templates:
      - *sds_arm_image
      - *sds_amd_image
  - name_template: "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.ENVOYINIT_IMAGE_REPO }}:{{ .Env.VERSION }}"
    image_templates:
      - *envoyinit_arm_image
      - *envoyinit_amd_image
  - name_template: "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.AI_EXTENSION_IMAGE_REPO }}:{{ .Env.VERSION }}"
    image_templates:
      - *ai_extensions_arm_image
      - *ai_extensions_amd_image
changelog:
  disable: true
release:
  prerelease: "auto"
  mode: "replace"
  replace_existing_artifacts: true
  header: |
    {{ if eq .Env.VERSION "v2.0.0-main" }}
    ðŸš€ Nightly build of kgateway!
    ---
    It includes the latest changes but may be unstable. Use it for testing and providing feedback.
    {{ else }}
    ðŸŽ‰ Welcome to the {{ .Env.VERSION }} release of the kgateway project!
    ---
    {{ end }}
  footer: |
    ## Installation

    The kgateway project is available as a Helm chart and docker images.

    ### Helm Charts

    The Helm chart is available at {{ .Env.VANITY_REGISTRY }}/charts/kgateway.

    ### Docker Images

    The docker images are available at:

    - {{ .Env.VANITY_REGISTRY }}/{{ .Env.CONTROLLER_IMAGE_REPO }}:{{ .Env.VERSION }}
    - {{ .Env.VANITY_REGISTRY }}/{{ .Env.SDS_IMAGE_REPO }}:{{ .Env.VERSION }}
    - {{ .Env.VANITY_REGISTRY }}/{{ .Env.ENVOYINIT_IMAGE_REPO }}:{{ .Env.VERSION }}

    ## Quickstart

    Try installing this release:
    ```
    helm install kgateway-crds oci://{{ .Env.VANITY_REGISTRY }}/charts/kgateway-crds --version {{ .Env.VERSION }} --namespace kgateway-system --create-namespace
    helm install kgateway oci://{{ .Env.VANITY_REGISTRY }}/charts/kgateway --version {{ .Env.VERSION }} --namespace kgateway-system --create-namespace
    ```

    For detailed installation instructions and next steps, please visit our [quickstart guide](https://kgateway.dev/docs/quickstart/).
