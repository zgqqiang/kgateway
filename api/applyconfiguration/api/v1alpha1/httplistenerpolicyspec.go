// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// HTTPListenerPolicySpecApplyConfiguration represents a declarative configuration of the HTTPListenerPolicySpec type for use
// with apply.
type HTTPListenerPolicySpecApplyConfiguration struct {
	TargetRefs []LocalPolicyTargetReferenceApplyConfiguration `json:"targetRefs,omitempty"`
	AccessLog  []AccessLogApplyConfiguration                  `json:"accessLog,omitempty"`
}

// HTTPListenerPolicySpecApplyConfiguration constructs a declarative configuration of the HTTPListenerPolicySpec type for use with
// apply.
func HTTPListenerPolicySpec() *HTTPListenerPolicySpecApplyConfiguration {
	return &HTTPListenerPolicySpecApplyConfiguration{}
}

// WithTargetRefs adds the given value to the TargetRefs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the TargetRefs field.
func (b *HTTPListenerPolicySpecApplyConfiguration) WithTargetRefs(values ...*LocalPolicyTargetReferenceApplyConfiguration) *HTTPListenerPolicySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTargetRefs")
		}
		b.TargetRefs = append(b.TargetRefs, *values[i])
	}
	return b
}

// WithAccessLog adds the given value to the AccessLog field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AccessLog field.
func (b *HTTPListenerPolicySpecApplyConfiguration) WithAccessLog(values ...*AccessLogApplyConfiguration) *HTTPListenerPolicySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAccessLog")
		}
		b.AccessLog = append(b.AccessLog, *values[i])
	}
	return b
}
